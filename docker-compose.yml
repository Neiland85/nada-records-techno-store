version: '3.8'

# Load environment variables from .env.docker file
# Copy .env.docker.example to .env.docker and configure your secrets

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: nada_records_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - nada_records_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis Cache and Queue
  redis:
    image: redis:7-alpine
    container_name: nada_records_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nada_records_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # MinIO S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: nada_records_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - nada_records_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Create MinIO buckets on startup
  minio-init:
    image: minio/mc:latest
    container_name: nada_records_minio_init
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - nada_records_network
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      mc mb --ignore-existing minio/nada-records-dev;
      mc mb --ignore-existing minio/nada-records-tracks;
      mc mb --ignore-existing minio/nada-records-covers;
      mc anonymous set public minio/nada-records-covers;
      echo 'MinIO buckets initialized successfully';
      "
    restart: "no"

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: nada_records_adminer
    ports:
      - "8080:8080"
    networks:
      - nada_records_network
    environment:
      ADMINER_DEFAULT_SERVER: ${ADMINER_DEFAULT_SERVER}
      ADMINER_DESIGN: ${ADMINER_DESIGN}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: nada_records_redis_commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD}
      HTTP_USER: ${REDIS_COMMANDER_USER}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD}
    ports:
      - "8081:8081"
    networks:
      - nada_records_network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Mailhog for email testing (development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: nada_records_mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - nada_records_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  nada_records_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
